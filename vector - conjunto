#include "stdafx.h"
#include <iostream>
#include "conio.h"
#include "vector.h"

using namespace std;

class conjunto: public vector
{
	//no hay private pq no tiene atributos propios, solo hereda los del vector
public:
	void juntar(conjunto A, conjunto B); 
	void copiar(conjunto A);
	void Union(conjunto A, conjunto B);
	void interseccion(conjunto A, conjunto B);
	void Diferencia(conjunto A, conjunto B);
	void DiferenciaSim(conjunto A, conjunto B);
	bool subConjunto(conjunto B);
	bool pertenece(int x); //verifica si el elemento existe en el conjunto 
	bool iguales(conjunto A);
};

bool conjunto::pertenece(int x)
{
	int i=0;
	while(i<n)
	{
		if(x==v[i])
			return true;
		else
			i++;
	}
	return false;
}

void conjunto::copiar(conjunto A)
{
	int i=0;
	while(i<A.getDim())
	{
		insertarUltimo(A.getElem(i));
		i++;
	}
}

void conjunto::juntar(conjunto A, conjunto B)
{
	copiar(A);
	copiar(B);
}

void conjunto::interseccion(conjunto A, conjunto B)
{
	for (int i=0; i<A.getDim(); i++)
	{
		if ( B.pertenece(A.getElem(i)))
			insertarUltimo(A.getElem(i));
	}
}

void conjunto::Union(conjunto A, conjunto B)
{
	for (int i=0; i<A.getDim(); i++)
		insertarUltimo(A.getElem(i));
	for (int i=0; i<B.getDim();i++)
	{
		if (!A.pertenece(B.getElem(i)))
			insertarUltimo(B.getElem(i));
	}
}

bool conjunto::subConjunto(conjunto B)
{
	int cont=0;
	for (int i=0;i<(B.getDim());i++)
	{
		if (pertenece(B.getElem(i)))
		{
			cont++;
		}

	}
	if (cont==getDim())
		return true;
	else
		return false;
}

bool conjunto::iguales(conjunto A) // Dos conjuntos son iguales si A es subconjunto de B y B es subconjunto de A
{
	return (subConjunto(A) && A.subConjunto(*this));
}

void conjunto:: Diferencia(conjunto A, conjunto B)
{
	for (int i=0;i<(A.getDim());i++)
	{
		if(B.pertenece(A.getElem(i))==false)
			insertarUltimo(A.getElem(i));

	}
	
}

void main()
{
	conjunto A,B,C,D,E;
	cout<<"CONJUNTO A"<<endl;
	A.leer();
	A.imprimir();
	cout<<endl;
	cout<<"CONJUNTO B"<<endl;
	B.leer();
	B.imprimir();
	cout<<endl<<"La union de los dos conjuntos es: "<<endl;
	C.Union(A,B);
	C.imprimir();
	cout<<endl<<"La interseccion de los dos conjuntos es: "<<endl;
	D.interseccion(A,B);
	D.imprimir();
	cout<<endl;
	if (A.subConjunto(B))
		cout<<"A es un subconjunto de B"<<endl;
	else
		cout<<"A no es un subconjunto de B"<<endl;

	cout<<endl;
	if (B.iguales(A))
		cout<<"Ambos conjuntos son iguales"<<endl;
	else
		cout<<"Ambos conjuntos no son iguales"<<endl;

	cout<<endl<<"La diferencia de los dos conjuntos es: "<<endl;
	E.Diferencia(A,B);
	E.imprimir();
	cout<<endl;

	getch();

}
